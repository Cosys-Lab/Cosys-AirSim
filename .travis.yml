language: cpp
#git:
# shorten this if we can nail down submodule depth
#  depth: 3

fast_finish: false

matrix:
  allow_failures:
    - env: ALLOW_FAILURES=true

  include:
    # linux version have unique dependencies, so we set them up individually
    - os: linux
      dist: trusty
      sudo: required
      services:
        - docker
    #- os: windows
    # dotnet: 2.1.5
    # services:
    #   - docker
        

    # OS X CMake
    #- os: osx
    #  sudo: required
    #  osx_image: xcode8.2
    #  compiler:
    #    - clang
    #  env:
    #    - TOOL="cmake"
    #    - DESCRIPTION="OS X build/test via CMake"

# docker exec xenial apt-get -y install clang libclang-3.8-dev;
install:
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
      docker pull ubuntu:xenial;
      docker run -d --name xenial -dti ubuntu:xenial bash;
      docker ps -a;
      docker exec xenial mkdir /build;
      docker cp . xenial:/build;
      docker exec xenial apt-get update;
      docker exec xenial apt-get -y upgrade;
      docker exec xenial apt-get -y install git wget unzip sudo;
      docker exec xenial apt-get -y install build-essential software-properties-common cmake;
      docker exec xenial apt-get update;
    elif [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
      echo "No install osx actions--using repo";
    elif [[ "$TRAVIS_OS_NAME" == "osx" ]] && [[ "$TOOL" == "cmake" ]]; then
      echo "No install Windows actions--using repo";
    fi

before_install:
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
      echo "No pre-install linux actions--using docker";
    elif [[ "$TRAVIS_OS_NAME" == "osx" ]] && [[ "$TOOL" == "cmake" ]]; then
      echo "No pre-install osx actions";
    fi

#docker exec xenial /bin/sh -c "export EIGEN3_INCLUDE_DIR=/build/eigen/eigen3 && cd /build/cmake && sh ./build.sh && cmake . && make";
script:
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
      docker exec -t xenial /build/setup.sh;
      docker exec -t xenial /build/build.sh;
    elif [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
      .\\build.cmd;
      .\\Unity\\build.cmd;
    elif  [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      git submodule update --init --recursive;
      ./setup.sh;
      ./build.sh;
    fi
